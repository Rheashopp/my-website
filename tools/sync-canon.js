#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const cheerio = require('cheerio');

const projectRoot = path.resolve(__dirname, '..');
const indexPath = path.join(projectRoot, 'index.html');
const canonJsPath = path.join(projectRoot, 'assets/js/canon.js');

const TARGET_PAGES = [
  'about.html',
  'contact.html',
  'research.html',
  'chat.html',
  'privacy.html',
  'terms.html',
  '404.html',
  'products/index.html',
  'products/si-orion.html',
  'products/si-helix.html',
  'products/si-aegis.html',
];

function readIndexCanon() {
  const html = fs.readFileSync(indexPath, 'utf8');
  const headMatch = html.match(/<head>([\s\S]*?)<\/head>/i);
  if (!headMatch) {
    throw new Error('Unable to locate <head> in index.html');
  }
  let headInner = headMatch[1];
  headInner = headInner.replace(/\s*<title>[\s\S]*?<\/title>/i, '');
  headInner = headInner.replace(/\s*<meta[^>]*name\s*=\s*"description"[^>]*>/i, '');
  const navMatch = html.match(/<nav[\s\S]*?<\/nav>/i);
  if (!navMatch) {
    throw new Error('Unable to locate header <nav> in index.html');
  }
  const footerMatch = html.match(/<footer[\s\S]*?<\/footer>/i);
  if (!footerMatch) {
    throw new Error('Unable to locate footer in index.html');
  }
  const bodyMatch = html.match(/<body[^>]*class="([^"]*)"[^>]*>/i);
  if (!bodyMatch) {
    throw new Error('Unable to locate body class in index.html');
  }
  return {
    headCanon: headInner.trim(),
    headerHtml: navMatch[0].trim(),
    footerHtml: footerMatch[0].trim(),
    bodyClass: bodyMatch[1].trim(),
  };
}

function escapeTemplateLiteral(value) {
  return value.replace(/\\/g, '\\\\').replace(/`/g, '\\`').replace(/\$\{/g, '\\${');
}

function writeCanonModule(canon) {
  const lines = [
    '// Auto-generated by tools/sync-canon.js',
    "export const HEAD_CANON = `" + escapeTemplateLiteral(canon.headCanon) + "`;",
    "export const HEADER_HTML = `" + escapeTemplateLiteral(canon.headerHtml) + "`;",
    "export const FOOTER_HTML = `" + escapeTemplateLiteral(canon.footerHtml) + "`;",
    "export const BODY_CLASS_CANON = `" + escapeTemplateLiteral(canon.bodyClass) + "`;",
    '',
  ];
  fs.writeFileSync(canonJsPath, lines.join('\n'), 'utf8');
}

function adjustRelativeValue(value, fromDir) {
  if (!value) return value;
  const trimmed = value.trim();
  if (!trimmed) return value;
  if (trimmed.startsWith('#')) return value;
  if (trimmed.startsWith('mailto:') || trimmed.startsWith('tel:')) return value;
  if (/^(?:[a-zA-Z][a-zA-Z0-9+.-]*:|\/\/)/.test(trimmed)) return value;
  if (trimmed.startsWith('data:')) return value;

  let pathPart = trimmed;
  let hash = '';
  let query = '';

  const hashIndex = pathPart.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathPart.slice(hashIndex);
    pathPart = pathPart.slice(0, hashIndex);
  }

  const queryIndex = pathPart.indexOf('?');
  if (queryIndex !== -1) {
    query = pathPart.slice(queryIndex);
    pathPart = pathPart.slice(0, queryIndex);
  }

  if (!pathPart) return value;

  const normalized = pathPart.replace(/^\.\//, '');
  const baseDir = fromDir && fromDir !== '.' ? fromDir : '.';
  const isPageRelative = normalized.startsWith('../') || normalized.startsWith('./');
  const targetPath = path.posix.normalize(
    isPageRelative ? path.posix.join(baseDir, normalized) : path.posix.join('.', normalized)
  );
  let relative = path.posix.relative(baseDir, targetPath);
  if (!relative) {
    relative = targetPath;
  }
  if (!relative) {
    return value;
  }
  const result = relative + query + hash;
  return result;
}

function resolveAssetPath(value, pageRelative) {
  if (!value) return value;
  const trimmed = value.trim();
  if (!trimmed) return value;
  if (trimmed.startsWith('#')) return value;
  if (trimmed.startsWith('mailto:') || trimmed.startsWith('tel:')) return value;
  if (/^(?:[a-zA-Z][a-zA-Z0-9+.-]*:|\/\/)/.test(trimmed)) return value;
  if (trimmed.startsWith('data:')) return value;
  const pageDir = path.posix.dirname(pageRelative);
  const baseDir = pageDir && pageDir !== '.' ? pageDir : '.';
  let combined = path.posix.normalize(path.posix.join(baseDir, trimmed));
  while (combined.startsWith('../')) {
    combined = combined.slice(3);
  }
  return combined;
}

function adjustFragment(fragment, fromDir) {
  const $ = cheerio.load(`<fragment>${fragment}</fragment>`, { decodeEntities: false });
  const fragmentRoot = $('fragment');
  fragmentRoot.find('[href]').each((_, el) => {
    const value = $(el).attr('href');
    const updated = adjustRelativeValue(value, fromDir);
    $(el).attr('href', updated);
  });
  fragmentRoot.find('[src]').each((_, el) => {
    const value = $(el).attr('src');
    const updated = adjustRelativeValue(value, fromDir);
    $(el).attr('src', updated);
  });
  fragmentRoot.find('meta').each((_, el) => {
    const $el = $(el);
    const property = ($el.attr('property') || '').toLowerCase();
    const name = ($el.attr('name') || '').toLowerCase();
    if (property === 'og:image' || name === 'twitter:image') {
      const value = $el.attr('content');
      const updated = adjustRelativeValue(value, fromDir);
      $el.attr('content', updated);
    }
  });
  const html = fragmentRoot.html() || '';
  return html.trim();
}

function indentFragment(fragment, indent = '  ') {
  if (!fragment) return '';
  return fragment
    .split('\n')
    .map((line) => (line.trim().length ? `${indent}${line}` : ''))
    .join('\n')
    .replace(/\n{3,}/g, '\n\n');
}

function updatePage(pageRelative, canon) {
  const filePath = path.join(projectRoot, pageRelative);
  const html = fs.readFileSync(filePath, 'utf8');
  const $ = cheerio.load(html, { decodeEntities: false });
  const head = $('head');

  const titleHtml = head.find('title').first().html() || '';
  const descriptionMeta = head.find('meta[name="description"]').first();
  const descriptionContent = descriptionMeta.attr('content') || '';
  const canonicalHref = head.find('link[rel="canonical"]').first().attr('href') || '';
  const ogTitle = head.find('meta[property="og:title"]').first().attr('content') || '';
  const ogDescription = head.find('meta[property="og:description"]').first().attr('content') || '';
  const ogImage = head.find('meta[property="og:image"]').first().attr('content') || '';
  const twitterImage = head.find('meta[name="twitter:image"]').first().attr('content') || '';

  const pageDir = path.posix.dirname(pageRelative);
  const fromDir = pageDir === '.' ? '' : pageDir;

  const canonDoc = cheerio.load(`<fragment>${canon.headCanon}</fragment>`, { decodeEntities: false });
  const fragmentRoot = canonDoc('fragment');
  if (canonicalHref) {
    fragmentRoot.find('link[rel="canonical"]').attr('href', canonicalHref);
  }
  if (ogTitle) {
    fragmentRoot.find('meta[property="og:title"]').attr('content', ogTitle);
  }
  if (ogDescription) {
    fragmentRoot.find('meta[property="og:description"]').attr('content', ogDescription);
  }
  if (ogImage) {
    fragmentRoot.find('meta[property="og:image"]').attr('content', resolveAssetPath(ogImage, pageRelative));
  }
  if (twitterImage) {
    fragmentRoot.find('meta[name="twitter:image"]').attr('content', twitterImage);
  }
  fragmentRoot.find('[href]').each((_, el) => {
    const value = canonDoc(el).attr('href');
    const updated = adjustRelativeValue(value, fromDir);
    canonDoc(el).attr('href', updated);
  });
  fragmentRoot.find('[src]').each((_, el) => {
    const value = canonDoc(el).attr('src');
    const updated = adjustRelativeValue(value, fromDir);
    canonDoc(el).attr('src', updated);
  });
  fragmentRoot.find('meta').each((_, el) => {
    const property = (canonDoc(el).attr('property') || '').toLowerCase();
    const name = (canonDoc(el).attr('name') || '').toLowerCase();
    if (property === 'og:image' || name === 'twitter:image') {
      const value = canonDoc(el).attr('content');
      const updated = adjustRelativeValue(value, fromDir);
      canonDoc(el).attr('content', updated);
    }
  });
  const headCanonAdjusted = fragmentRoot.html() || '';

  const styleHref = adjustRelativeValue('assets/css/style.css', fromDir);
  const shimHref = adjustRelativeValue('assets/css/canon-shim.css', fromDir);

  const extraScripts = [];
  head.find('script[type="application/ld+json"]').each((_, el) => {
    extraScripts.push(indentFragment(adjustFragment($.html(el), fromDir)));
  });
  head.find('script').each((_, el) => {
    const html = $(el).html() || '';
    if (html.includes('window.SILENT_CONFIG')) {
      extraScripts.push(indentFragment(adjustFragment($.html(el), fromDir)));
    }
  });

  const headParts = [];
  headParts.push(`  <title>${titleHtml}</title>`);
  if (descriptionContent) {
    headParts.push(`  <meta name="description" content="${descriptionContent}">`);
  }
  headParts.push(indentFragment(headCanonAdjusted));
  headParts.push(`  <link rel="stylesheet" href="${styleHref}">`);
  headParts.push(`  <link rel="stylesheet" href="${shimHref}">`);
  extraScripts.forEach((fragment) => {
    if (fragment) headParts.push(fragment);
  });
  const headContent = headParts.filter(Boolean).join('\n');
  head.html(`\n${headContent}\n`);

  const body = $('body');
  const existingClasses = new Set((body.attr('class') || '').split(/\s+/).filter(Boolean));
  canon.bodyClass.split(/\s+/).forEach((cls) => {
    if (cls) existingClasses.add(cls);
  });
  body.attr('class', Array.from(existingClasses).join(' '));

  const headerHtml = indentFragment(adjustFragment(canon.headerHtml, fromDir));
  let navTarget = body.find('nav').first();
  const headerWrapper = body.find('header:has(> nav)').first();
  if (headerWrapper.length) {
    headerWrapper.replaceWith(headerHtml);
  } else if (navTarget.length) {
    navTarget.replaceWith(headerHtml);
  } else {
    body.prepend(`\n${headerHtml}\n`);
  }

  const footerHtml = indentFragment(adjustFragment(canon.footerHtml, fromDir));
  const footer = body.find('footer').first();
  if (footer.length) {
    footer.replaceWith(footerHtml);
  } else {
    body.append(`\n${footerHtml}`);
  }

  let output = $.html({ decodeEntities: false });
  output = output.replace('<!DOCTYPE html><html', '<!DOCTYPE html>\n<html');
  output = output.replace(/<html([^>]*)><head>/, '<html$1>\n<head>');
  fs.writeFileSync(filePath, output, 'utf8');
}

function main() {
  const canon = readIndexCanon();
  writeCanonModule(canon);
  TARGET_PAGES.forEach((page) => updatePage(page, canon));
}

main();
